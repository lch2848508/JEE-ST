<?xml version="1.0" encoding="utf-8"?>
<s:HGroup gap="-1" keyDown="hgroup1_keyDownHandler(event)" implements="mx.managers.IFocusManagerComponent,com.estudio.flex.module.InterfaceEditableControl" creationComplete="eventCreateCompleted(event)" xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx" width="150" height="23">
	<fx:Script>
		<![CDATA[
			import com.estudio.flex.common.InterfaceFormUI;
			import com.estudio.flex.module.EditableControlParams;
			import com.estudio.flex.module.FormDataService;
			import com.estudio.flex.utils.ArrayCollectionUtils;
			import com.estudio.flex.utils.JSFunUtils;
			import com.estudio.flex.utils.StringUtils;

			import mx.collections.ArrayCollection;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.events.FlexMouseEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;

			import spark.events.TextOperationEvent;

			public var columns:String="";
			public var formDataService:FormDataService=null;

			public var itemDatasetName:String=""; //选择项数据源
			public var itemValueFieldName:String=""; //选择项值字段
			public var itemDisplayFieldName:String=""; //选择项显示值字段
			public var itemSearchFieldName:String=""; //选择项查询字段

			public var parentComboBox:String="";

			private var _currentText:String="";
			private var _currentKeyValue:String="";
			private var _currentSearchText:String="";
			private var _isASyncDataSet:Boolean=true;

			public var callbackeChang:Function=null; //内容变化回调函数

			public var backgroundColor:uint=0xFFFFFF;

			[Bindable]
			private var dynamicDataProvider:ArrayCollection=null;
			private var MAX_RECORD_NUMBER:int=200;

			private var _bgColor:uint=0xFFFFFF;

			public function set bgColor(v:uint):void
			{
				_bgColor=v;
				if (this.textInput)
					this.textInput.setStyle("contentBackgroundColor", readonly ? FlexGlobals.topLevelApplication.gobalSetting.readOnlyColor : _bgColor);
			}

			//----------------------------------------------------------------------------------
			public function get currentKeyValue():String
			{
				return _currentKeyValue;
			}

			//----------------------------------------------------------------------------------
			//设置值

			//----------------------------------------------------------------------------------
			public function clearValue():void
			{
				if (_isASyncDataSet)
				{
					dynamicDataProvider=new ArrayCollection([]);
					datagrid.dataProvider=null;
					datagrid.invalidateDisplayList();
				}
				textInput.text="";
				_currentKeyValue="";
				_currentSearchText="";
				if (!_isASyncDataSet)
				{
					dynamicDataProvider.refresh();
					datagrid.invalidateList();
				}
			}

			//----------------------------------------------------------------------------------
			private function dynamicDataProviderFilter(item:Object):Boolean
			{
				return StringUtils.isEmpty(_currentSearchText) || item[itemSearchFieldName].toUpperCase().indexOf(_currentSearchText) != -1;
			}

			//----------------------------------------------------------------------------------
			private function dynamicLoadItems():void
			{
				if (StringUtils.isEmpty(itemDatasetName))
					return;
				if (dynamicDataProvider.length == 0 || _isASyncDataSet)
				{
					var dataset:Object=formDataService.getDataSet(itemDatasetName);
					var syncParams:Array=dataset.asyncParams;
					var httpParams:Object={datasetName: itemDatasetName, o: "loadASyncRecord"};
					var parentKey:String="";
					if (!StringUtils.isEmpty(parentComboBox))
						parentKey=formInstance.getControlValue(parentComboBox);
					httpParams.parentKey=parentKey;
					httpParams.matchStr=_currentSearchText;
					var json:Object=JSFunUtils.JSFun("getASyncDataSetRecords", httpParams);
					if (json && json.r)
					{
						this.itemSearchFieldName=StringUtils.nvl(this.itemSearchFieldName, this.itemDisplayFieldName);
						dynamicDataProvider=new ArrayCollection(json.records);
						datagrid.dataProvider=dynamicDataProvider;
					}
				}
				if (!_isASyncDataSet)
				{
					dynamicDataProvider.filterFunction=dynamicDataProviderFilter;
					dynamicDataProvider.refresh();
					datagrid.dataProvider=dynamicDataProvider;
				}

			}

			//----------------------------------------------------------------------------------
			protected function eventCreateCompleted(event:FlexEvent):void
			{
				if (!StringUtils.isEmpty(columns))
					createDataGridColumns(columns.split("|"));
				this.textInput.text=_currentText;
				this.textInput.editable=!this.readonly;
				this.popupUpButton.enabled=!this.readonly;
				if (!StringUtils.isEmpty(itemDatasetName))
				{
					var dataset:Object=formDataService.getDataSet(itemDatasetName);
					_isASyncDataSet=dataset.async;
				}
				itemSearchFieldName=StringUtils.nvl(itemSearchFieldName, itemDisplayFieldName);
				textInput.setStyle("contentBackgroundColor", readonly ? FlexGlobals.topLevelApplication.gobalSetting.readOnlyColor : _bgColor);
			}

			//----------------------------------------------------------------------------------
			public function initDataSetValuesByCurrentValue():void
			{
				if (isBindDatasource)
				{
					controlParams.dataservice.setDataSetValue(controlParams.databaseName, controlParams.fieldName, _currentKeyValue);
					if (!StringUtils.isEmpty(controlParams.extFieldName))
						controlParams.dataservice.setDataSetValue(controlParams.databaseName, controlParams.extFieldName, _currentText);
					if (callbackeChang != null)
						callbackeChang(this);
				}
			}

			//----------------------------------------------------------------------------------
			//创建数据列

			private function createDataGridColumns(columns:Array):void
			{
				var gridColumns:Array=[];
				for (var i:int=0; i < columns.length; i+=2)
				{
					var column:DataGridColumn=new DataGridColumn();
					column.dataField=columns[i + 1];
					column.headerText=columns[i];
					column.setStyle("textAlign", "left");
					column.width=datagrid.width * 2 / columns.length;
					gridColumns.push(column);
				}
				datagrid.columns=gridColumns;
				if (gridColumns.length == 1)
					datagrid.headerHeight=0;
				datagrid.invalidateDisplayList();
			}

			///////////////////////////////////////////////////////////////////////////////////
			override public function setFocus():void
			{
				textInput.setFocus();
			}

			/////////////////////////////////////////////////////////////////////////////////////////////
			//实现接口 InterfceEditableControl
			private var controlParams:EditableControlParams=new EditableControlParams();

			public function get databaseName():String
			{
				return controlParams.databaseName;
			}

			public function set databaseName(value:String):void
			{
				controlParams.databaseName=value;
			}

			public function get fieldName():String
			{
				return controlParams.fieldName;
			}

			public function set fieldName(value:String):void
			{
				controlParams.fieldName=value;
			}

			public function get extFieldName():String
			{
				return controlParams.extFieldName;
			}

			public function set extFieldName(value:String):void
			{
				controlParams.extFieldName=value;
			}

			public function get controlValue():String
			{
				return this._currentKeyValue;
			}

			public function get controlExtValue():String
			{
				return this._currentText;
			}

			public function setControlValue(value:String, extValue:String, isSettingDatabase:Boolean):void
			{
				_currentKeyValue=value;
				_currentSearchText=extValue;
				if (_isASyncDataSet)
				{
					dynamicDataProvider=new ArrayCollection([]);
					datagrid.dataProvider=dynamicDataProvider;
				}
				else
				{
					dynamicDataProvider.refresh();
					datagrid.invalidateList();
				}
				this.datagrid.selectedItem=null;
				if (isSettingDatabase && isBindDatasource)
				{
					controlParams.dataservice.setDataSetValue(controlParams.databaseName, controlParams.fieldName, value);
					if (!StringUtils.isEmpty(controlParams.extFieldName))
						controlParams.dataservice.setDataSetValue(controlParams.databaseName, controlParams.extFieldName, extValue);
				}
				if (textInput)
					textInput.text=extValue;
				else
					callLater(function():void
					{
						textInput.text=extValue;
					});
			}


			//是否只读
			public function get readonly():Boolean
			{
				return controlParams.readonly;
			}

			public function set readonly(value:Boolean):void
			{
				if (controlParams.readonly != value)
				{
					controlParams.readonly=value;
					if (this.textInput)
					{
						this.textInput.editable=!value;
						this.popupUpButton.enabled=!value;
					}
				}
				textInput.setStyle("contentBackgroundColor", readonly ? FlexGlobals.topLevelApplication.gobalSetting.readOnlyColor : _bgColor);
			}

			public function get defaultReadonly():Boolean
			{
				return controlParams.defaultReadOnly;
			}

			public function set defaultReadonly(value:Boolean):void
			{
				controlParams.defaultReadOnly=value;
			}

			public function get controlType():int
			{
				return EditableControlParams.CONST_LOOKUP_COMBOBOX;
			}


			public function reset():void
			{
				this.readonly=this.defaultReadonly || this.formInstance.readonly;
				if (isBindDatasource)
				{
					_currentKeyValue=controlParams.dataservice.getDataSetValue(controlParams.databaseName, controlParams.fieldName);
					if (!StringUtils.isEmpty(controlParams.extFieldName))
						_currentText=controlParams.dataservice.getDataSetValue(controlParams.databaseName, controlParams.extFieldName);
					textInput.text=_currentText;
				}
				if (_isASyncDataSet)
					dynamicDataProvider=new ArrayCollection([]);
				dynamicDataProvider.refresh();
				datagrid.invalidateList();
			}

			public function set dataservice(value:FormDataService):void
			{
				controlParams.dataservice=value;
			}

			public function get dataservice():FormDataService
			{
				return controlParams.dataservice;
			}

			public function setDataBindParams(formInstance:InterfaceFormUI, formDataService:FormDataService, databaseName:String, fieldName:String, extFieldName:String):void
			{
				controlParams.formInstance=formInstance;
				controlParams.dataservice=formDataService;
				controlParams.databaseName=databaseName;
				controlParams.fieldName=fieldName;
				controlParams.extFieldName=extFieldName;
				controlParams.isBindDatasource=!(StringUtils.isEmpty(databaseName) && !StringUtils.isEmpty(fieldName));
			}

			public function get isBindDatasource():Boolean
			{
				return controlParams.isBindDatasource;
			}

			public function get formInstance():InterfaceFormUI
			{
				return controlParams.formInstance;
			}

			/////////////////////////////////////////////////////////////////////////////////////////////////
			private var isBindEvented:Boolean=false;

			public function bindEvent():void
			{
				if (!isBindEvented)
				{
					isBindEvented=true;
					for (var eventName:String in controlParams.eventMap)
						this.addEventListener(eventName, controlParams.eventMap[eventName]);
				}
			}

			public function unBindEvent():void
			{
				if (isBindEvented)
				{
					for (var eventName:String in controlParams.eventMap)
						this.removeEventListener(eventName, controlParams.eventMap[eventName]);
					isBindEvented=false;
				}
			}

			public function registerEvent(eventName:String, eventFun:Function):void
			{
				controlParams.eventMap[eventName]=eventFun;
			}

			/////////////////////////////////////////////////////////////////////////////////////////////

			protected function hgroup1_keyDownHandler(event:KeyboardEvent):void
			{
				if (event.keyCode == Keyboard.ENTER)
				{
					if (datagrid.visible)
						datagrid_itemClickHandler(null);
					else
						showGrid();
				}
				else if (event.keyCode == Keyboard.ESCAPE)
				{
					hideGrid();
				}
				if (event.keyCode == Keyboard.UP || event.keyCode == Keyboard.DOWN)
				{
					if (datagrid.visible)
						datagrid.dispatchEvent(event);
				}
			}

			///////////////////////////////////////////////////////////////////////////////
			private function showGrid():void
			{
				if (!datagrid.visible)
				{
					initDataGridItems();
					datagrid.visible=true;
					PopUpManager.addPopUp(datagrid, this, false);
					var p:Point=new Point(0, this.height - 1);
					p=localToGlobal(p);
					p.x=Math.min(p.x, FlexGlobals.topLevelApplication.width - datagrid.width);
					p.y=Math.min(p.y, FlexGlobals.topLevelApplication.height - datagrid.height);
					datagrid.move(p.x, p.y);
					callLater(function():void
					{
						textInput.setFocus();
					});
					datagrid.addEventListener(FlexMouseEvent.MOUSE_DOWN_OUTSIDE, popMouseDownOutsideHandler);
					datagrid.addEventListener(FlexMouseEvent.MOUSE_WHEEL_OUTSIDE, popMouseDownOutsideHandler);
				}
			}

			////////////////////////////////////////////////////////////////////////////////
			private function hideGrid():void
			{
				if (datagrid.visible)
				{
					PopUpManager.removePopUp(datagrid);
					datagrid.visible=false;
					callLater(function():void
					{
						textInput.setFocus();
					});
					datagrid.removeEventListener(FlexMouseEvent.MOUSE_DOWN_OUTSIDE, popMouseDownOutsideHandler);
					datagrid.removeEventListener(FlexMouseEvent.MOUSE_WHEEL_OUTSIDE, popMouseDownOutsideHandler);
				}
			}

			//////////////////////////////////////////////////////////////////////////////////
			private function popMouseDownOutsideHandler(event:Event):void
			{
				hideGrid();
			}

			/////////////////////////////////////////////////////////////////////////////////
			protected function datagrid_itemClickHandler(event:ListEvent):void
			{
				hideGrid();
				var item:Object=datagrid.selectedItem;
				if (item == null)
				{
					item={};
					item[itemValueFieldName]="";
					item[this.extFieldName]="";
				}
				_currentText=item[itemDisplayFieldName];
				textInput.text=_currentText;
				_currentSearchText=_currentText;
				dynamicDataProvider.refresh();
				datagrid.invalidateList();
				if (!StringUtils.equal(_currentKeyValue, item[itemValueFieldName]))
				{
					_currentKeyValue=item[itemValueFieldName];
					if (isBindDatasource)
					{
						if (!StringUtils.isEmpty(controlParams.extFieldName))
							formInstance.setDataSetValue(controlParams.databaseName, controlParams.extFieldName, _currentText, [this]);
						formInstance.setDataSetValue(controlParams.databaseName, controlParams.fieldName, _currentKeyValue, [this]);
						if (callbackeChang != null)
							callbackeChang(this);
					}
				}
			}

			//////////////////////////////////////////////////////////////////////////////////
			protected function popupUpButton_clickHandler(event:MouseEvent):void
			{
				if (datagrid.visible)
					hideGrid();
				else
					showGrid();
			}

			//////////////////////////////////////////////////////////////////////////////////
			private function initDataGridItems():void
			{
				dynamicLoadItems();
				var key:String=_currentKeyValue;
				var index:int=ArrayCollectionUtils.indexOf(dynamicDataProvider, itemValueFieldName, key);
				if (index == -1 && dynamicDataProvider.length != 0)
					index=0;
				if (index == -1)
					return;
				callLater(function():void
				{
					datagrid.selectedIndex=index;
					datagrid.scrollToIndex(index);
				});
			}

			/////////////////////////////////////////////////////////////////////////////////
			//查找数据
			protected function textInput_changeHandler(event:TextOperationEvent):void
			{
				_currentSearchText=StringUtils.trim(textInput.text);
				if (_isASyncDataSet)
					dynamicLoadItems();
				else
				{
					dynamicDataProvider.refresh();
					if (datagrid)
						datagrid.invalidateList();
				}
			}
			/////////////////////////////////////////////////////////////////////////////////
		]]>
	</fx:Script>
	<fx:Declarations>
		<mx:DataGrid contentBackgroundColor="0xF5F5F5" dataProvider="{dynamicDataProvider}" itemClick="datagrid_itemClickHandler(event)" focusEnabled="true" height="400" textAlign="left" width="{Math.max(400,this.width)}" sortableColumns="false"
					 editable="false" alternatingItemColors="[0xFFFFFF]" verticalGridLineColor="0xCCCCCC" verticalGridLines="true" horizontalGridLineColor="0xCCCCCC" horizontalGridLines="true" headerHeight="25" rowHeight="25" id="datagrid"
					 horizontalScrollPolicy="auto" verticalScrollPolicy="auto" visible="false">
		</mx:DataGrid>
	</fx:Declarations>
	<s:TextInput change="textInput_changeHandler(event)" x="0" y="0" width="100%" height="100%" id="textInput">
	</s:TextInput>
	<s:Button cornerRadius="0" width="17" height="100%" id="popupUpButton" icon="@Embed('combobox_btn.png')" click="popupUpButton_clickHandler(event)">
	</s:Button>
</s:HGroup>
