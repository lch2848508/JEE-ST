<?xml version="1.0" encoding="utf-8"?>
<s:CheckBox implements="com.estudio.flex.module.InterfaceEditableControl" xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx" skinClass="com.estudio.flex.style.CheckBoxExSkin">
    <fx:Declarations>
        <!-- 将非可视元素（例如服务、值对象）放在此处 -->
    </fx:Declarations>
    <fx:Script>
        <![CDATA[
            import com.estudio.flex.common.InterfaceFormUI;
            import com.estudio.flex.module.EditableControlParams;
            import com.estudio.flex.module.FormDataService;
            import com.estudio.flex.utils.Convert;
            import com.estudio.flex.utils.StringUtils;
            /////////////////////////////////////////////////////////////////////////////////////////////
            //实现接口 InterfceEditableControl
            private var controlParams:EditableControlParams = new EditableControlParams ();

            public function get databaseName():String
            {
                return controlParams.databaseName;
            }

            public function set databaseName(value:String):void
            {
                controlParams.databaseName = value;
            }

            public function get fieldName():String
            {
                return controlParams.fieldName;
            }

            public function set fieldName(value:String):void
            {
                controlParams.fieldName = value;
            }

            public function get extFieldName():String
            {
                return controlParams.extFieldName;
            }

            public function set extFieldName(value:String):void
            {
                controlParams.extFieldName = value;
            }

            public function get controlValue():String
            {
                return this.selected ? "1" : "0";
            }

            public function get controlExtValue():String
            {
                return controlValue;
            }

            public function setControlValue(value:String , extValue:String , isSettingDatabase:Boolean):void
            {
                this.selected = Convert.object2Boolean (value , false);
                if (isSettingDatabase && isBindDatasource)
                    controlParams.dataservice.setDataSetValue (controlParams.databaseName , controlParams.fieldName , this.selected ? "1" : "0");
            }


            //是否只读
            public function get readonly():Boolean
            {
                return controlParams.readonly;
            }

            public function set readonly(value:Boolean):void
            {
                if (controlParams.readonly != value)
                {
                    controlParams.readonly = value;
                    super.enabled = !this.readonly;
                }
            }

            public function get defaultReadonly():Boolean
            {
                return controlParams.defaultReadOnly;
            }

            public function set defaultReadonly(value:Boolean):void
            {
                controlParams.defaultReadOnly = value;
            }

            public function get controlType():int
            {
                return EditableControlParams.CONST_CHECKBOX;
            }

            public function reset():void
            {
				if(this.formInstance)
                this.readonly = this.defaultReadonly || this.formInstance.readonly;
                //this.setControlValue("", "", false);
            }

            public function set dataservice(value:FormDataService):void
            {
                controlParams.dataservice = value;
            }

            public function get dataservice():FormDataService
            {
                return controlParams.dataservice;
            }

            public function setDataBindParams(formInstance:InterfaceFormUI , formDataService:FormDataService , databaseName:String , fieldName:String , extFieldName:String):void
            {
                controlParams.formInstance = formInstance;
                controlParams.dataservice = formDataService;
                controlParams.databaseName = databaseName;
                controlParams.fieldName = fieldName;
                controlParams.extFieldName = extFieldName;
                controlParams.isBindDatasource = !(StringUtils.isEmpty (databaseName) && !StringUtils.isEmpty (fieldName));
            }

            public function get isBindDatasource():Boolean
            {
                return controlParams.isBindDatasource;
            }

            public function get formInstance():InterfaceFormUI
            {
                return controlParams.formInstance;
            }

            /////////////////////////////////////////////////////////////////////////////////////////////////
            private var isBindEvented:Boolean = false;

            public function bindEvent():void
            {
                if (!isBindEvented)
                {
                    isBindEvented = true;
                    for (var eventName:String in controlParams.eventMap)
                        this.addEventListener (eventName , controlParams.eventMap[eventName]);
                }
            }

            public function unBindEvent():void
            {
                if (isBindEvented)
                {
                    for (var eventName:String in controlParams.eventMap)
                        this.removeEventListener (eventName , controlParams.eventMap[eventName]);
                    isBindEvented = false;
                }
            }

            public function registerEvent(eventName:String , eventFun:Function):void
            {
                controlParams.eventMap[eventName] = eventFun;
            }
            /////////////////////////////////////////////////////////////////////////////////////////////////
        ]]>
    </fx:Script>
</s:CheckBox>
