<?xml version="1.0" encoding="utf-8"?>
<component:TitleWindowEx backgroundColor="0xEEEEEE" xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:component="com.estudio.flex.component.*" width="490" height="460" title="摄像头图像获取组件"
						 close="titlewindowex1_closeHandler(event)" creationComplete="titlewindowex1_creationCompleteHandler(event)">
	<fx:Script>
		<![CDATA[
			import com.estudio.flex.utils.AjaxUtils;
			import com.estudio.flex.utils.ImageUtils;
			import com.estudio.flex.utils.StringUtils;

			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.utils.UIDUtil;

			import spark.events.IndexChangeEvent;
			private var _callFunction:Function=null;
			private var _url:String=null;

			private var currentCamera:Camera=null;
			private var cameraSizes:Array=null;
			private var bd:BitmapData=null;
			private var _closeImmediately:Boolean=true;


			//关闭窗体
			protected function titlewindowex1_closeHandler(event:CloseEvent):void
			{
				_instance.Video.attachCamera(null);
				_instance.currentCamera=null;
				PopUpManager.removePopUp(_instance);
			}

			protected function button1_clickHandler(event:MouseEvent):void
			{
				titlewindowex1_closeHandler(null);
			}

			//选择摄像头
			protected function CB_Camera_changeHandler(event:IndexChangeEvent):void
			{
				attachmentCamera();
			}

			//连接摄像头
			private function attachmentCamera():void
			{
				if (Video)
				{
					if (currentCamera != null)
						Video.attachCamera(null);
					if (CB_Camera.selectedIndex >= 0)
					{
						currentCamera=Camera.getCamera(String(CB_Camera.selectedIndex));
						if (currentCamera != null)
						{
							var w:int=CB_Size.selectedItem.w;
							var h:int=CB_Size.selectedItem.h;
							currentCamera.setMode(w, h, 5);
							currentCamera.setQuality(0, 100);
							Video.attachCamera(currentCamera);
						}
					}
				}
			}

			///////////////////////////////////////////////////////////////////////////////////////////////
			protected function titlewindowex1_creationCompleteHandler(event:FlexEvent):void
			{
				cameraSizes=[{w: 640, h: 480, label: "640x480"}, {w: 800, h: 600, label: "800x600"}, {w: 1024, h: 768, label: "1024x768"}, {w: 1600, h: 1200, label: "1600x1200"}];
				CB_Size.dataProvider=new ArrayCollection(cameraSizes);
				CB_Size.selectedIndex=0;
				if (CB_Camera.dataProvider.length != 0)
				{
					CB_Camera.selectedIndex=0;
					CB_Camera_changeHandler(null);
				}
			}

			///////////////////////////////////////////////////////////////////////////////////////////////
			//确定按钮
			protected function button2_clickHandler(event:MouseEvent):void
			{
				updateStatus("准备文件上传，正在编码文件...");
				var guid:String=UIDUtil.createUID();
				guid=StringUtils.replace(guid, "{", "");
				guid=StringUtils.replace(guid, "}", "");
				guid=StringUtils.replace(guid, "-", "");
				AjaxUtils.uploadFile(_url, "image", "camert[" + guid + "].jpg", ImageUtils.bitmap2Jpeg(getCamertBitmap()), event4UploadSuccess, event4UploadProgress, event4UploadError);

			}

			//////////////////////////////////////////////////////////////////////////////////////////////////
			//更新状态
			private function updateStatus(str):void
			{
				labelStatus.text=str;
				labelStatus.validateNow();
			}

			private function event4UploadProgress(p:int, t:int):void
			{
				var str:String="正在上传图像 已完成:" + int(p / t) + "%";
				updateStatus(str);
			}

			private function event4UploadError(e:Event):void
			{
				FlexGlobals.topLevelApplication.popupMSNMessage("系统提示", "从摄像头抓取图像并上传失败！", true);
				event4UploadProgress(1, 1);
				if (_closeImmediately)
					button1_clickHandler(null);
			}

			private function event4UploadSuccess(data:Object):void
			{
				var json:Object=JSON.parse(String(data));
				if (json && json.errorCode * 1 == -65535)
				{
					FlexGlobals.topLevelApplication.raiseSessionMissError();
					return;
				}
				event4UploadProgress(1, 1);
				if (_closeImmediately)
				{
					if (_callFunction != null)
						_callFunction();
					button1_clickHandler(null);
				}
			}

			////////////////////////////////////////////////////////////////////////////////////////////////
			//获取摄像头图片数据流
			private function getCamertBitmap():BitmapData
			{
				var w:int=CB_Size.selectedItem.w;
				var h:int=CB_Size.selectedItem.h;
				var scale:Number=w / Video.width;
				var bd:BitmapData=new BitmapData(w, h);
				var matrix:Matrix=new Matrix();
				matrix.scale(scale, scale);
				bd.draw(Video, matrix);
				return bd;
			}
		]]>
	</fx:Script>
	<component:layout>
		<s:VerticalLayout gap="0"/>
	</component:layout>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:HGroup width="100%" height="28" verticalAlign="middle" gap="3" paddingLeft="2">
		<s:Label text="摄像头:">
		</s:Label>
		<s:ComboBox id="CB_Camera" width="250" change="CB_Camera_changeHandler(event)" dataProvider="{new ArrayCollection(Camera.names)}">
		</s:ComboBox>
		<s:Label text="分辨率:">
		</s:Label>
		<s:ComboBox width="100" selectedIndex="0" id="CB_Size" change="CB_Camera_changeHandler(event)">
		</s:ComboBox>
	</s:HGroup>
	<s:Line id="line" width="100%" height="0">
		<s:stroke>
			<s:SolidColorStroke color="#CCCCCC"/>
		</s:stroke>
	</s:Line>
	<s:Group width="100%" height="100%">
		<mx:VideoDisplay id="Video" height="100%" width="100%" verticalCenter="0" horizontalCenter="0">
		</mx:VideoDisplay>
	</s:Group>

	<s:Line id="line1" width="100%" height="0">
		<s:stroke>
			<s:SolidColorStroke color="#CCCCCC"/>
		</s:stroke>
	</s:Line>
	<s:Group width="100%" height="38">
		<s:Label verticalAlign="middle" left="5" top="10" id="labelStatus" color="0xFF0000" fontWeight="bold">

		</s:Label>
		<s:Button width="60" top="5" height="28" right="5" label="关闭" click="button1_clickHandler(event)">

		</s:Button>
		<s:Button width="60" top="5" height="28" right="70" label="确定" click="button2_clickHandler(event)">

		</s:Button>
	</s:Group>
	<fx:Script>
		<![CDATA[
			private static var _instance:WinCamera=null;

			public static function execute(callbackFunction:Function, url:String, w:int=490, h:int=460, closeImmediately:Boolean=true):void
			{
				var isFirst:Boolean=false;
				if (!_instance)
				{
					_instance=new WinCamera();

					isFirst=true;
				}
				_instance._callFunction=callbackFunction;
				_instance._url=url;
				_instance._closeImmediately=closeImmediately;
				_instance.width=w;
				_instance.height=h;
				PopUpManager.addPopUp(_instance, FlexGlobals.topLevelApplication as DisplayObject, true);
				PopUpManager.centerPopUp(_instance);
				if (!isFirst)
				{
					_instance.attachmentCamera();
					_instance.labelStatus.text="";
				}
			}
		]]>
	</fx:Script>
</component:TitleWindowEx>
