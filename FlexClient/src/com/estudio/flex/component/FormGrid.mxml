<?xml version="1.0" encoding="utf-8"?>
<s:Group width="400" height="300" implements="com.estudio.flex.module.InterfaceEditableControl" creationComplete="group1_creationCompleteHandler(event)" xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx">
	<s:layout>
		<s:VerticalLayout gap="-1"/>
	</s:layout>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<fx:Script source="FormGridAS.as">
	</fx:Script>
	<fx:Script>
		<![CDATA[
			import com.estudio.flex.module.EditableControlParams;
			import com.estudio.flex.utils.ArrayUtils;
			/////////////////////////////////////////////////////////////////////////////////////////////
			//实现接口 InterfceEditableControl
			private var controlParams:EditableControlParams=new EditableControlParams();

			public function get databaseName():String
			{
				return controlParams.databaseName;
			}

			public function set databaseName(value:String):void
			{
				controlParams.databaseName=value;
			}

			public function get fieldName():String
			{
				return controlParams.fieldName;
			}

			public function set fieldName(value:String):void
			{
				controlParams.fieldName=value;
			}

			public function get extFieldName():String
			{
				return controlParams.extFieldName;
			}

			public function set extFieldName(value:String):void
			{
				controlParams.extFieldName=value;
			}

			public function get controlValue():String
			{
				return "";
			}

			public function get controlExtValue():String
			{
				return this.controlValue;
			}

			public function setControlValue(value:String, extValue:String, isSettingDatabase:Boolean):void
			{

			}


			//是否只读
			public function get readonly():Boolean
			{
				return controlParams.readonly;
			}

			public function set readonly(value:Boolean):void
			{
				if (controlParams.readonly != value)
				{
					controlParams.readonly=value;
					for (var i:int=0; i < checkBoxColumnHeaders.length; i++)
						checkBoxColumnHeaders[i].enabled=!this.readonly;
					this.grid.editable=!this.readonly;
					this.grid.invalidateList();
					this.grid.validateNow();
					if (value && buttonBar.parent)
						this.removeElement(buttonBar);
					else if (!value && buttonBar != null && buttonBar.parent == null && buttonBar.dataProvider != null && buttonBar.dataProvider.length != 0)
						this.addElement(buttonBar);
				}
			}

			public function get defaultReadonly():Boolean
			{
				return controlParams.defaultReadOnly;
			}

			public function set defaultReadonly(value:Boolean):void
			{
				controlParams.defaultReadOnly=value;
			}

			public function get controlType():int
			{
				return EditableControlParams.CONST_GRID;
			}


			public function reset():void
			{
				if (this.formInstance)
					this.readonly=this.defaultReadonly || this.formInstance.readonly;
				//this.setControlValue("", "", false);
			}

			public function set dataservice(value:FormDataService):void
			{
				controlParams.dataservice=value;
			}

			public function get dataservice():FormDataService
			{
				return controlParams.dataservice;
			}

			public function setDataBindParams(formInstance:InterfaceFormUI, formDataService:FormDataService, databaseName:String, fieldName:String, extFieldName:String):void
			{
				controlParams.formInstance=formInstance;
				controlParams.dataservice=formDataService;
				controlParams.databaseName=databaseName;
				controlParams.fieldName=fieldName;
				controlParams.extFieldName=extFieldName;
				controlParams.isBindDatasource=!(StringUtils.isEmpty(databaseName));
			}

			public function get isBindDatasource():Boolean
			{
				return controlParams.isBindDatasource;
			}

			public function get formInstance():InterfaceFormUI
			{
				return controlParams.formInstance;
			}
			/////////////////////////////////////////////////////////////////////////////////////////////////
			private var isBindEvented:Boolean=false;

			public function bindEvent():void
			{
				if (!isBindEvented)
				{
					isBindEvented=true;
					for (var eventName:String in controlParams.eventMap)
						this.addEventListener(eventName, controlParams.eventMap[eventName]);
				}
			}

			public function unBindEvent():void
			{
				if (isBindEvented)
				{
					for (var eventName:String in controlParams.eventMap)
						this.removeEventListener(eventName, controlParams.eventMap[eventName]);
					isBindEvented=false;
				}
			}

			public function registerEvent(eventName:String, eventFun:Function):void
			{
				controlParams.eventMap[eventName]=eventFun;
			}

			///////////////////////////////////////////////////////////////////////////////////////////////////

			protected function grid_doubleClickHandler(event:MouseEvent):void
			{
				if (!StringUtils.isEmpty(_eventOnDoubleClickFunName))
					formInstance["executeJSFunction"](_eventOnDoubleClickFunName, {});
			}
			
			protected function grid_itemEditorCreateHandler(event:DataGridEvent):void
			{
//				if(event.itemRenderer is DateFieldEditor)
//				{
//					DateFieldEditor(event.itemRenderer).popup.displayPopUp = true;
//				}
			}
			
		]]>
	</fx:Script>
	<mx:DataGrid itemEditorCreate="grid_itemEditorCreateHandler(event)" doubleClickEnabled="true" doubleClick="grid_doubleClickHandler(event)" editable="true" id="grid" width="100%" height="100%" left="0" top="0" horizontalScrollPolicy="auto" itemClick="eventOnGridItemClickHandler(event)" alternatingItemColors="[0xFEFEFE]" sortableColumns="false"
				 headerHeight="26" rowHeight="26" dragEnabled="false" draggableColumns="false" change="eventGridChange(event)">
	</mx:DataGrid>
	<mx:ButtonBar id="buttonBar" height="28" color="#000000" itemClick="eventButtonItemClick(event)" creationComplete="eventButtonCreateComplete(event)">
	</mx:ButtonBar>
</s:Group>
