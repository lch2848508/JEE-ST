<?xml version="1.0" encoding="utf-8"?>
<s:VGroup gap="0" creationComplete="vgroup1_creationCompleteHandler(event)" xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%">
	<fx:Script>
		<![CDATA[
			import com.esri.ags.Map;
			import com.esri.ags.events.MapEvent;
			import com.esri.ags.events.ZoomEvent;
			import com.esri.ags.layers.ArcGISTiledMapServiceLayer;
			import com.estudio.flex.utils.AjaxUtils;
			import com.estudio.flex.utils.ArrayUtils;
			import com.estudio.flex.utils.ObjectUtils;
			import com.estudio.flex.utils.StringUtils;
			import com.webgis.MapLayerManager;
			import com.webgis.module.legend.LegendItemRender;

			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.utils.Base64Decoder;

			import spark.events.IndexChangeEvent;
			////////////////////////////////////////////////////////////////////////////////////
			[Bindable]
			public var map:Object=null;
			private var _layers:Array=null;
			private var selectedServerId:String="-1";
			private var serverId2Ajax:Object={};
			public var mapLayerManager:MapLayerManager=null;

			////////////////////////////////////////////////////////////////////////////////////
			public function get layers():Array
			{
				return _layers;
			}

			////////////////////////////////////////////////////////////////////////////////////
			public function set layers(value:Array):void
			{
				_layers=value;
				updateLayersLegend();
			}

			////////////////////////////////////////////////////////////////////////////////////

			public function updateLayersLegend():void
			{
				if (combobox.selectedItem)
					selectedServerId=combobox.selectedItem.id;

				var layerIds:Array=[];
				if (_layers && _layers.length != 0)
				{
					for (var i:int=0; i < _layers.length; i++)
					{
						layerIds.push(_layers[i].id + "");
					}
				}
				if (ArrayUtils.indexOf(layerIds, selectedServerId) == -1)
					selectedServerId="-1";

				legendList.dataProvider=new ArrayCollection([]);
				legendList.dataProvider["filterFunction"]=filterFunction;
				combobox.dataProvider=new ArrayCollection([{label: "全部", id: "-1"}]);
				combobox.selectedIndex=0;

				var scale:Number=map.scale;
				var base64:Base64Decoder=new Base64Decoder();
				if (_layers && _layers.length != 0)
				{
					for (var i:int=0; i < _layers.length; i++)
					{
						var serverInfo:Object=_layers[i];
						var serverId:String=serverInfo.id;
						if (!mapLayerManager.getServerLegendInfo(serverId))
						{
							if (!serverId2Ajax[serverId])
							{
								serverId2Ajax[serverId]=true;
								var url:String=serverInfo.url + "/legend?f=json";
								if (serverInfo.proxyCache)
									url=flash.external.ExternalInterface.call("getWebGisProxyCache") + "/" + serverInfo.id + "/?" + url;
								AjaxUtils.getData(url, function(text:String, serverInfo:Object):void
								{
									var serverLegendInfo:Object=ObjectUtils.parserJSON(text);
									if (serverLegendInfo)
									{
										mapLayerManager.registerServerLegendInfo(serverInfo.id, serverLegendInfo);
										if (serverLegendInfo.layers)
										{
											for (var j:int=0; j < serverLegendInfo.layers.length; j++)
											{
												for (var m:int=0; m < serverLegendInfo.layers[j].legend.length; m++)
												{
													base64.decode(serverLegendInfo.layers[j].legend[m].imageData);
													serverLegendInfo.layers[j].legend[m].imageData=base64.toByteArray();
												}
											}
											registerLayerLegend2List(scale, serverInfo, serverLegendInfo.layers);
										}
									}
								}, serverInfo);
							}
						}
						else if (mapLayerManager.getServerLegendInfo(serverId).layers)
						{
							registerLayerLegend2List(scale, serverInfo, mapLayerManager.getServerLegendInfo(serverId).layers);
						}
					}
				}
			}

			////////////////////////////////////////////////////////////////////////////////////
			private function registerLayerLegend2List(scale:Number, serverInfo:Object, layers:Array):void
			{
				var serverId:String=serverInfo.id;

				var dataProvider:ArrayCollection=legendList.dataProvider as ArrayCollection;

				var layerLegendList:Array=[];

				for (var i:int=0; i < layers.length; i++)
				{
					var layerLegend:Object=layers[i];
					var layerId:String=layerLegend.layerId;
					if (!serverInfo.layers.hasOwnProperty(layerId) && !serverInfo.onlyServer)
						continue;

					var maxScale:Number=layerLegend.maxScale;
					var minScale:Number=layerLegend.minScale;
					if (minScale != 0 && scale > minScale)
						continue;
					if (maxScale != 0 && scale < maxScale)
						continue;

					var layerName:String=layerLegend.layerName;

					var legendList:Array=[];
					for (var j:int=0; j < layerLegend.legend.length; j++)
					{
						var legend:Object=layerLegend.legend[j];
						var label:String=legend.label;
						if (StringUtils.isEmpty(label))
							label=serverInfo.layers[layerId];
						legendList.push({serverId: serverId, label: label, imgData: legend.imageData, type: 2});
					}
					if (legendList.length != 0)
					{
						if (layerLegend.legend.length == 1)
						{
							legendList[0].type=1;
							layerLegendList.push(legendList[0]);
						}
						else
						{
							layerLegendList.push({serverId: serverId, label: serverInfo.onlyServer ? layerName : serverInfo.layers[layerId], type: 1, items: legendList});
						}
					}
				}

				if (layerLegendList.length == 0)
					return;

				//服务
				var comboboxServers:Array=(combobox.dataProvider as ArrayCollection).source;
				comboboxServers.push(serverInfo);

				dataProvider.addItem({label: serverInfo.label, serverId: serverId, type: 0});
				for (var i:int=0; i < layerLegendList.length; i++)
				{
					var item:Object=layerLegendList[i];
					dataProvider.addItem(item);
					if (item.items)
						for (var j:int=0; j < item.items.length; j++)
							dataProvider.addItem(item.items[j]);
				}

				if (selectedServerId == serverId)
					combobox.selectedItem=serverInfo;

				var data:ArrayCollection=legendList.dataProvider as ArrayCollection;
				data.refresh();
			}

			////////////////////////////////////////////////////////////////////////////////////
			private function filterFunction(data:Object):Boolean
			{
				return data.serverId == selectedServerId || selectedServerId == "-1";
			}

			////////////////////////////////////////////////////////////////////////////////////
			protected function combobox_changeHandler(event:IndexChangeEvent):void
			{
				if (combobox.selectedItem)
					selectedServerId=combobox.selectedItem.id;
				var data:ArrayCollection=legendList.dataProvider as ArrayCollection;
				data.refresh();
			}

			////////////////////////////////////////////////////////////////////////////////////
			protected function vgroup1_creationCompleteHandler(event:FlexEvent):void
			{
				combobox.textInput.editable=false;
				combobox.dataProvider=new ArrayCollection([{label: "全部", id: "-1"}]);
				combobox.selectedIndex=0;
				(map as Map).addEventListener(ZoomEvent.ZOOM_END, function(event:ZoomEvent):void
				{
					updateLayersLegend();
				});
			}
			////////////////////////////////////////////////////////////////////////////////////
		]]>
	</fx:Script>
	<s:HGroup gap="3" width="100%" paddingLeft="2" height="28" verticalAlign="middle" paddingTop="2" paddingRight="2" paddingBottom="2">
		<s:Label text="服务" verticalAlign="middle" paddingTop="2">

		</s:Label>
		<s:ComboBox change="combobox_changeHandler(event)" id="combobox" width="100%" height="100%">

		</s:ComboBox>
	</s:HGroup>

	<s:Line width="100%" height="0">
		<s:stroke>
			<s:SolidColorStroke color="#CCCCCC"/>
		</s:stroke>
	</s:Line>
	<s:List itemRenderer="com.webgis.module.legend.LegendItemRender" width="100%" dataProvider="{new ArrayCollection([])}" height="100%" id="legendList"/>
</s:VGroup>
