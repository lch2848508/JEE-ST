<?xml version="1.0" encoding="utf-8"?>
<component:TitleWindowEx backgroundColor="0xF5F5F5" close="titlewindowex1_closeHandler(event)" creationComplete="titlewindowex1_creationCompleteHandler(event)" title="标绘属性编辑器" xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
						 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:component="com.estudio.flex.component.*" width="480" height="360" xmlns:component1="com.webgis.component.*">
	<fx:Script>
		<![CDATA[
			import com.esri.ags.Graphic;
			import com.estudio.flex.utils.StringUtils;

			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.managers.PopUpManager;
			private static var instance:WinPolttingEdit=null;
			[Bindable]
			private var attributes:ArrayCollection=new ArrayCollection([]);
			[Bindable]
			private var geometryType:String="";
			private var iconURL:String="";
			[Bindable]
			public var readonly:Boolean=false;
			[Bindable]
			public var attachmentId:String="";
			private var feature:Graphic=null;

			public static function execute(params:Object, readonly:Boolean, callFunction:Function):void
			{
				if (instance == null)
					instance=new WinPolttingEdit();
				instance.applyParams(params);
				instance.readonly=readonly;
				instance.feature=params.feature;
				instance.callFunction=callFunction;
				PopUpManager.addPopUp(instance, FlexGlobals.topLevelApplication as DisplayObject, true);
				PopUpManager.centerPopUp(instance);
			}

			public static function setAttachmentId(id:String):void
			{
				instance.attachmentId=id;
			}
			//////////////////////////////////////////////////////////////////
			private var params:Object=null;
			private var callFunction:Function=null;

			//////////////////////////////////////////////////////////////////
			public function applyParams(params:Object):void
			{
				this.params=params;
				if (!StringUtils.isEmpty(params.id))
					attachmentId=params.id;
				else
					attachmentId="";
				geometryType=params.type;
				if (navigatorContain)
				{
					inputCaption.text=params.caption;
					inputContent.text=params.content;
					chkShare.selected=params.isshare;
					attributes=new ArrayCollection(params.attributes);
					inputLineWidth.text=params.style.width;
					lineColor.selectedColor=params.style.lineColor;
					fillColor.selectedColor=params.style.fillColor;
					iconURL=params.style.icon;
					for (var i:int=0; i < iconContain.numChildren; i++)
					{
						var btn:Object=iconContain.getElementAt(i);
						if (btn is ToolbarButton)
							btn.selected=iconURL == btn.tag;
					}
					navigatorContain.selectedIndex=0;
				}
			}

			///////////////////////////////////////////////////////////////////

			protected function titlewindowex1_creationCompleteHandler(event:FlexEvent):void
			{
				applyParams(this.params);
			}

			///////////////////////////////////////////////////////////////////
			protected function titlewindowex1_closeHandler(event:CloseEvent):void
			{
				PopUpManager.removePopUp(instance);
			}

			///////////////////////////////////////////////////////////////////
			protected function okBtnclickHandler(event:MouseEvent):void
			{
				titlewindowex1_closeHandler(null);
				callFunction(generateParams(), feature);
			}

			///////////////////////////////////////////////////////////////////
			protected function button1_clickHandler(event:MouseEvent):void
			{
				titlewindowex1_closeHandler(null);
				callFunction(null, feature);
			}

			///////////////////////////////////////////////////////////////////
			private function generateParams():Object
			{
				return {id: attachmentId, caption: inputCaption.text, content: inputContent.text, isshare: chkShare.selected, attributes: attributes.source, style: {icon: iconURL, width: inputLineWidth.text, lineColor: lineColor.selectedColor, fillColor: fillColor.selectedColor}};
			}

			///////////////////////////////////////////////////////////////////
			protected function addBtnClick(event:MouseEvent):void
			{
				if (navigatorContain.selectedIndex == 1)
				{
					attributes.addItem({name: "", value: ""});
					attributes.refresh();
					datagrid.invalidateList();
					datagrid.selectedIndex=attributes.length - 1;
				}
				else if (navigatorContain.selectedIndex == 2)
				{
					attachment.uploadFiles();
				}
			}

			///////////////////////////////////////////////////////////////////
			protected function btnDelClick(event:MouseEvent):void
			{
				if (navigatorContain.selectedIndex == 1)
				{
					var item:Object=datagrid.selectedItem;
					if (item)
					{
						attributes.removeItem(item);
						attributes.refresh();
						datagrid.invalidateList();
					}
				}
				else if (navigatorContain.selectedIndex == 2)
				{
					attachment.deleteSelectFiles();
				}
			}

			///////////////////////////////////////////////////////////////////

			protected function toolbarbutton1_clickHandler(event:MouseEvent):void
			{
				for (var i:int=0; i < iconContain.numChildren; i++)
				{
					var btn:Object=iconContain.getElementAt(i);
					if (btn is ToolbarButton)
						btn.selected=false;
				}
				event.currentTarget.selected=true;
				iconURL=event.currentTarget.tag;
			}

			protected function navigatorContain_changeHandler(event:IndexChangedEvent):void
			{
				if (event.newIndex == 2 && StringUtils.isEmpty(attachmentId))
				{
					callFunction(generateParams(), feature);
				}
			}
		]]>
	</fx:Script>
	<mx:TabNavigator change="navigatorContain_changeHandler(event)" borderVisible="true" left="0" top="-1" tabHeight="25" right="0" bottom="40" id="navigatorContain">
		<s:NavigatorContent label="一般属性">
			<s:BorderContainer left="-1" right="-1" top="-1" bottom="0">
				<s:Label text="标题" left="10" top="13"/>
				<s:TextInput left="60" top="10" right="60" id="inputCaption" editable="{!readonly}"/>
				<s:CheckBox top="13" right="10" label="共享" id="chkShare" enabled="{!readonly}"/>

				<!-- 线面属性编辑器 -->
				<s:HGroup visible="{geometryType!='esriGeometryPoint'}" gap="5" top="50" left="10" verticalAlign="middle">
					<s:Label text="线宽" width="45"/>
					<s:TextInput text="1" id="inputLineWidth" width="40" editable="{!readonly}"/>
					<s:Label text="颜色"/>
					<mx:ColorPicker id="lineColor" width="40" editable="{!readonly}" enabled="{!readonly}"/>
					<s:Label visible="{geometryType!='esriGeometryPolyline'}" text="填充颜色"/>
					<mx:ColorPicker visible="{geometryType!='esriGeometryPolyline'}" id="fillColor" width="40" editable="{!readonly}" enabled="{!readonly}"/>
				</s:HGroup>


				<!-- 点符号编辑器 -->
				<s:HGroup id="iconContain" visible="{geometryType=='esriGeometryPoint'}" gap="5" top="37" left="10" verticalAlign="middle">
					<s:Label text="符号化" width="45"/>
					<component1:ToolbarButton enabled="{!readonly}" click="toolbarbutton1_clickHandler(event)" selected="true" width="50" height="50" icon="@Embed('/assets/webgis/webgis-marker/01.png')" groupIndex="1" tag="01.png"/>
					<component1:ToolbarButton enabled="{!readonly}" click="toolbarbutton1_clickHandler(event)" width="50" height="50" icon="@Embed('/assets/webgis/webgis-marker/02.png')" groupIndex="1" tag="02.png"/>
					<component1:ToolbarButton enabled="{!readonly}" click="toolbarbutton1_clickHandler(event)" width="50" height="50" icon="@Embed('/assets/webgis/webgis-marker/03.png')" groupIndex="1" tag="03.png"/>
					<component1:ToolbarButton enabled="{!readonly}" click="toolbarbutton1_clickHandler(event)" width="50" height="50" icon="@Embed('/assets/webgis/webgis-marker/04.png')" groupIndex="1" tag="04.png"/>
					<component1:ToolbarButton enabled="{!readonly}" click="toolbarbutton1_clickHandler(event)" width="50" height="50" icon="@Embed('/assets/webgis/webgis-marker/05.png')" groupIndex="1" tag="05.png"/>
				</s:HGroup>

				<s:Label text="内容" left="10" top="90"/>
				<s:TextArea id="inputContent" left="60" minWidth="10" right="10" bottom="10" top="90" editable="{!readonly}"/>
			</s:BorderContainer>
		</s:NavigatorContent>
		<s:NavigatorContent label="属性编辑">
			<mx:DataGrid id="datagrid" selectionColor="0xFFFF00" alternatingItemColors="{[0xFFFFFF]}" dataProvider="{attributes}" editable="true" left="-1" right="-1" top="-1" bottom="0" headerHeight="25" rowHeight="25" borderColor="0x000000">
				<mx:columns>
					<mx:DataGridColumn headerText="属性名称" dataField="name" editable="{!readonly}"/>
					<mx:DataGridColumn headerText="属性值" dataField="value" editable="{!readonly}"/>
				</mx:columns>
			</mx:DataGrid>
		</s:NavigatorContent>

		<s:NavigatorContent label="附件材料">
			<component:InputFileUpload currentState="notInForm" p_id="{attachmentId}" id="attachment" left="-1" top="-1" right="-1" bottom="-1" type="gisAttachment" saveToDB="false" fileMaxSize="120"/>
		</s:NavigatorContent>

	</mx:TabNavigator>
	<s:Button visible="{navigatorContain.selectedIndex==1}" enabled="{!readonly}" bottom="5" left="5" width="70" height="30" label="增加" click="addBtnClick(event)"/>
	<s:Button visible="{navigatorContain.selectedIndex==1}" enabled="{!readonly}" bottom="5" left="80" width="70" height="30" label="删除" click="btnDelClick(event)"/>
	<s:Button visible="{navigatorContain.selectedIndex==2}" enabled="{!readonly}" bottom="5" left="5" width="70" height="30" label="选择文件" click="addBtnClick(event)"/>
	<s:Button visible="{navigatorContain.selectedIndex==2}" enabled="{!readonly}" bottom="5" left="80" width="70" height="30" label="删除文件" click="btnDelClick(event)"/>
	<s:Button bottom="5" right="5" width="70" height="30" label="关闭" click="button1_clickHandler(event)"/>
	<s:Button bottom="5" right="80" width="70" height="30" enabled="{!readonly}" label="确定" click="okBtnclickHandler(event)"/>
</component:TitleWindowEx>
